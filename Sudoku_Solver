def checker(board, row, column, num):
  
    #checks if the number is present in the row
    for i in range(9):
        if board[row][i] == num:
            return False

    #checks if the number is present in the column
    for j in range(9):
        if board[j][column] == num:
            return False

    # Check if the number is present in the current 3x3 box
    start_row = (row // 3) * 3
    start_column = (column // 3) * 3

    for i in range(3):
        for j in range(3):
            if board[start_row + i][start_column + j] == num:
                return False

    return True


def sudoku_solver(board):
    for row in range(9):
        for column in range(9):
            
            if board[row][column] == 0:
            
                for num in range(1, 10):
                    if checker(board, row, column, num):
                        #if the checker returns that the number can be replace the current with num
                        board[row][column] = num

                        # Recursively solve the Sudoku puzzle
                        if sudoku_solver(board):
                          return True
 

                    
                        # backtrack by resetting the cell to 0 if the solution is invalid
                        board[row][column] = 0

                # If no number can be placed, the puzzle is unsolvable
                return False


    return True

#formats sudoku puzzle in a grid
def sudoku_formatter(board):
    print("╔═══════════╦═══════════╦═══════════╗")
    for i, row in enumerate(board):
        print(("║" + " {}   {}   {} ║"*3).format(*[x if x != 0 else " " for x in row]))
        if i == 8:
            print("╚═══════════╩═══════════╩═══════════╝")
        elif i % 3 == 2:
            print("╠" + "═════"*2 + "═╬"+ "═════"*2 + "═╬"+ "═════"*2 + "═╣")
        else:
            print("║" + "   ┼"*2 + "   ║" + "   ┼"*2 + "   ║" + "   ┼"*2 +"   ║")



board = [
    [4, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 1, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]]
board2 = [
    [8, 0, 0, 0, 5, 0, 0, 0, 0],
    [9, 1, 3, 0, 1, 0, 7, 0, 4],
    [0, 3, 6, 4, 7, 0, 0, 0, 9],
    [2, 7, 6, 0, 0, 0, 6, 0, 0],
    [0, 6, 0, 7, 3, 8, 0, 2, 0],
    [0, 0, 9, 0, 0, 0, 0, 4, 7],
    [7, 0, 0, 0, 8, 9, 2, 5, 0],
    [6, 0, 2, 0, 4, 0, 1, 0, 8],
    [0, 0, 0, 0, 2, 0, 0, 0, 6]]
board3 = [
    [9, 0, 6, 0, 5, 0, 0, 0, 0],
    [0, 1, 0, 0, 6, 0, 0, 0, 7],
    [0, 0, 0, 0, 8, 9, 0, 0, 4],
    [0, 0, 3, 0, 0, 1, 0, 0, 0],
    [8, 7, 0, 0, 0, 0, 0, 9, 5],
    [0, 0, 0, 5, 0, 0, 4, 0, 0],
    [4, 0, 0, 2, 3, 0, 0, 0, 0],
    [2, 0, 0, 0, 1, 0, 0, 4, 0],
    [0, 0, 0, 0, 7, 0, 5, 0, 6]]
board4 = [
    [9, 2, 6, 1, 5, 8, 0, 0, 0],
    [0, 1, 0, 0, 6, 0, 0, 0, 7],
    [0, 0, 0, 0, 8, 9, 0, 0, 4],
    [0, 0, 3, 0, 0, 1, 0, 0, 0],
    [8, 7, 0, 0, 0, 0, 0, 9, 5],
    [0, 0, 0, 5, 0, 0, 4, 0, 0],
    [4, 0, 0, 2, 3, 0, 0, 0, 0],
    [2, 0, 0, 0, 1, 0, 0, 4, 0],
    [0, 0, 0, 0, 7, 0, 5, 0, 6]]


board_bool = sudoku_solver(board)
board2_bool = sudoku_solver(board2)
board3_bool = sudoku_solver(board3)
board4_bool = sudoku_solver(board4)


if board_bool:
  print('Board 1 Solution')
  sudoku_formatter(board)
else:
  print('Board 1: No solution Found')

if board2_bool:
  print('Board 2 Solution')
  sudoku_formatter(board2)
else:
  print('Board 2: No solution Found')

if board3_bool:
  print('Board 3 Solution')
  sudoku_formatter(board3)
else:
  print('Board 3: No solution Found')

if board4_bool:
  print('Board 4 Solution')
  sudoku_formatter(board4)
else:
  print('Board 4: No solution Found')


